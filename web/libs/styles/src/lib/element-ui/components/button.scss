@charset "UTF-8";
@use 'sass:map';
@import '../mixins/button';
@import '../mixins/mixins';

@mixin button($tokens) {
    @include b(button) {
        background: map-get($tokens, button-default-background-color);
        border: map-get($tokens, border-base);
        border-color: map-get($tokens, button-default-border-color);
        color: map-get($tokens, button-default-font-color);

        @include button-size(map-get($tokens, button-padding-vertical), map-get($tokens, button-padding-horizontal), map-get($tokens, button-font-size), map-get($tokens, button-border-radius));

        &:hover,
        &:focus {
            color: map-get($tokens, color-primary-text);
            border-color: map-get($tokens, color-primary-light-5);
            background-color: map-get($tokens, color-primary-light-7);
        }

        &:active {
            color: mix(map-get($tokens, color-black), map-get($tokens, color-primary), map-get($tokens, button-active-shade-percent));
            border-color: mix(map-get($tokens, color-black), map-get($tokens, color-primary), map-get($tokens, button-active-shade-percent));
        }

        @include when(plain) {
            &:hover,
            &:focus {
                background: map-get($tokens, color-white);
                border-color: map-get($tokens, color-primary);
                color: map-get($tokens, color-primary-text);
            }

            &:active {
                background: map-get($tokens, color-white);
                border-color: mix(map-get($tokens, color-black), map-get($tokens, color-primary), map-get($tokens, button-active-shade-percent));
                color: mix(map-get($tokens, color-black), map-get($tokens, color-primary), map-get($tokens, button-active-shade-percent));
            }
        }

        @include when(active) {
            color: mix(map-get($tokens, color-black), map-get($tokens, color-primary), map-get($tokens, button-active-shade-percent));
            border-color: mix(map-get($tokens, color-black), map-get($tokens, color-primary), map-get($tokens, button-active-shade-percent));
        }

        @include when(disabled) {
            &,
            &:hover,
            &:focus {
                color: map-get($tokens, button-disabled-font-color);
                background-color: map-get($tokens, button-disabled-background-color);
                border-color: map-get($tokens, button-disabled-border-color);
            }

            &.is-plain {
                &,
                &:hover,
                &:focus {
                    background-color: map-get($tokens, color-white);
                    border-color: map-get($tokens, button-disabled-border-color);
                    color: map-get($tokens, button-disabled-font-color);
                }
            }
        }

        @include m(primary) {
            @include button-variant($tokens, map-get($tokens, button-primary-font-color), map-get($tokens, button-primary-background-color), map-get($tokens, button-primary-border-color));
        }
        @include m(success) {
            @include button-variant($tokens, map-get($tokens, button-success-font-color), map-get($tokens, button-success-background-color), map-get($tokens, button-success-border-color));
        }
        @include m(warning) {
            @include button-variant($tokens, map-get($tokens, button-warning-font-color), map-get($tokens, button-warning-background-color), map-get($tokens, button-warning-border-color));
        }
        @include m(danger) {
            @include button-variant($tokens, map-get($tokens, button-danger-font-color), map-get($tokens, button-danger-background-color), map-get($tokens, button-danger-border-color));
        }
        @include m(info) {
            @include button-variant($tokens, map-get($tokens, button-info-font-color), map-get($tokens, button-info-background-color), map-get($tokens, button-info-border-color));
        }
        @include m(medium) {
            @include button-size(map-get($tokens, button-medium-padding-vertical), map-get($tokens, button-medium-padding-horizontal), map-get($tokens, button-medium-font-size), map-get($tokens, button-medium-border-radius));
        }
        @include m(small) {
            @include button-size(map-get($tokens, button-small-padding-vertical), map-get($tokens, button-small-padding-horizontal), map-get($tokens, button-small-font-size), map-get($tokens, button-small-border-radius));
        }
        @include m(mini) {
            @include button-size(map-get($tokens, button-mini-padding-vertical), map-get($tokens, button-mini-padding-horizontal), map-get($tokens, button-mini-font-size), map-get($tokens, button-mini-border-radius));
        }
        @include m(text) {
            color: map-get($tokens, color-primary-text);

            &:hover,
            &:focus {
                color: mix(map-get($tokens, color-white), map-get($tokens, color-primary), map-get($tokens, button-hover-tint-percent));
            }
            &:active {
                color: mix(map-get($tokens, color-black), map-get($tokens, color-primary), map-get($tokens, button-active-shade-percent));
            }
        }
    }

    @include b(button-group) {
        & > .el-dropdown {
            & > .el-button {
                border-left-color: rgba(map-get($tokens, color-white), 0.5);
            }
        }

        @each $type in (primary, success, warning, danger, info) {
            .el-button#{$type} {
                &:first-child {
                    border-right-color: rgba(map-get($tokens, color-white), 0.5);
                }

                &:last-child {
                    border-left-color: rgba(map-get($tokens, color-white), 0.5);
                }

                &:not(:first-child):not(:last-child) {
                    border-left-color: rgba(map-get($tokens, color-white), 0.5);
                    border-right-color: rgba(map-get($tokens, color-white), 0.5);
                }
            }
        }
    }
}
