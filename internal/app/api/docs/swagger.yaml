basePath: /api/v1
definitions:
  ErrorResponse:
    properties:
      code:
        example: Internal
        type: string
      error:
        example: original server error message
        type: string
      msg:
        example: internal server error
        type: string
      status:
        example: error
        type: string
      trace_id:
        example: 1234567890abcdef1234567890abcdef
        type: string
    type: object
  SuccessResponse:
    properties:
      data:
        type: object
      status:
        example: success
        type: string
    type: object
  models.ActionConfig:
    additionalProperties:
      $ref: '#/definitions/models.ActionConfigItem'
    type: object
  models.ActionConfigItem:
    properties:
      fields:
        items:
          type: string
        type: array
        uniqueItems: true
      priority:
        maximum: 100
        minimum: 1
        type: integer
    required:
    - priority
    type: object
  models.Agent:
    properties:
      auth_status:
        enum:
        - authorized
        - unauthorized
        - blocked
        type: string
      connected_date:
        type: string
      created_date:
        type: string
      deleted_at:
        type: string
      description:
        maxLength: 255
        type: string
      group_id:
        minimum: 0
        type: integer
      hash:
        type: string
      id:
        minimum: 0
        type: integer
      info:
        $ref: '#/definitions/models.AgentInfo'
      ip:
        maxLength: 50
        type: string
      status:
        enum:
        - connected
        - disconnected
        type: string
      updated_at:
        type: string
      version:
        maxLength: 20
        type: string
    required:
    - auth_status
    - description
    - hash
    - info
    - ip
    - status
    - version
    type: object
  models.AgentDependency:
    properties:
      min_agent_version:
        type: string
      min_module_version:
        type: string
      module_name:
        type: string
      policy_id:
        minimum: 0
        type: integer
      source_module_name:
        type: string
      status:
        type: boolean
      type:
        enum:
        - to_receive_data
        - to_send_data
        - to_make_action
        - agent_version
        type: string
    required:
    - source_module_name
    - type
    type: object
  models.AgentInfo:
    properties:
      net:
        $ref: '#/definitions/models.AgentNet'
      os:
        $ref: '#/definitions/models.AgentOS'
      tags:
        items:
          type: string
        maxItems: 20
        type: array
        uniqueItems: true
      users:
        items:
          $ref: '#/definitions/models.AgentUser'
        type: array
    required:
    - net
    - os
    - tags
    - users
    type: object
  models.AgentNet:
    properties:
      hostname:
        type: string
      ips:
        items:
          type: string
        type: array
    required:
    - hostname
    - ips
    type: object
  models.AgentOS:
    properties:
      arch:
        enum:
        - "386"
        - amd64
        type: string
      name:
        maxLength: 255
        type: string
      type:
        enum:
        - windows
        - linux
        - darwin
        type: string
    required:
    - arch
    - name
    - type
    type: object
  models.AgentUpgradeTask:
    properties:
      agent_id:
        minimum: 1
        type: integer
      batch:
        type: string
      created:
        type: string
      id:
        minimum: 0
        type: integer
      last_update:
        type: string
      reason:
        type: string
      status:
        enum:
        - new
        - running
        - ready
        - failed
        type: string
      version:
        maxLength: 20
        type: string
    required:
    - batch
    - status
    - version
    type: object
  models.AgentUser:
    properties:
      groups:
        items:
          type: string
        type: array
      name:
        type: string
    required:
    - groups
    - name
    type: object
  models.Binary:
    properties:
      hash:
        type: string
      id:
        minimum: 0
        type: integer
      info:
        $ref: '#/definitions/models.BinaryInfo'
      tenant_id:
        minimum: 0
        type: integer
      type:
        enum:
        - vxagent
        type: string
      upload_date:
        type: string
      version:
        maxLength: 25
        type: string
    required:
    - info
    - type
    - version
    type: object
  models.BinaryChksum:
    properties:
      md5:
        type: string
      sha256:
        type: string
    required:
    - md5
    - sha256
    type: object
  models.BinaryInfo:
    properties:
      chksums:
        additionalProperties:
          $ref: '#/definitions/models.BinaryChksum'
        type: object
      files:
        items:
          type: string
        minItems: 1
        type: array
        uniqueItems: true
      version:
        $ref: '#/definitions/models.BinaryVersion'
    required:
    - chksums
    - files
    - version
    type: object
  models.BinaryVersion:
    properties:
      build:
        maximum: 10000
        minimum: 0
        type: integer
      major:
        maximum: 100
        minimum: 0
        type: integer
      minor:
        maximum: 100
        minimum: 0
        type: integer
      patch:
        maximum: 100
        minimum: 0
        type: integer
      rev:
        type: string
    type: object
  models.Changelog:
    additionalProperties:
      $ref: '#/definitions/models.ChangelogVersion'
    type: object
  models.ChangelogDesc:
    properties:
      date:
        type: string
      description:
        maxLength: 10000
        type: string
      title:
        maxLength: 300
        type: string
    required:
    - date
    - description
    - title
    type: object
  models.ChangelogVersion:
    additionalProperties:
      $ref: '#/definitions/models.ChangelogDesc'
    type: object
  models.DependencyItem:
    properties:
      min_agent_version:
        type: string
      min_module_version:
        type: string
      module_name:
        type: string
      type:
        enum:
        - to_receive_data
        - to_send_data
        - to_make_action
        - agent_version
        type: string
    required:
    - type
    type: object
  models.Event:
    properties:
      agent_id:
        minimum: 0
        type: integer
      date:
        type: string
      id:
        minimum: 0
        type: integer
      info:
        $ref: '#/definitions/models.EventInfo'
      module_id:
        minimum: 0
        type: integer
    required:
    - info
    type: object
  models.EventConfig:
    additionalProperties:
      $ref: '#/definitions/models.EventConfigItem'
    type: object
  models.EventConfigAction:
    properties:
      fields:
        items:
          type: string
        type: array
        uniqueItems: true
      module_name:
        type: string
      name:
        type: string
      priority:
        maximum: 100
        minimum: 1
        type: integer
    required:
    - module_name
    - name
    - priority
    type: object
  models.EventConfigItem:
    properties:
      actions:
        items:
          $ref: '#/definitions/models.EventConfigAction'
        type: array
      fields:
        items:
          type: string
        type: array
        uniqueItems: true
      group_by:
        items:
          type: string
        type: array
        uniqueItems: true
      max_count:
        maximum: 10000000
        minimum: 0
        type: integer
      max_time:
        maximum: 10000000
        minimum: 0
        type: integer
      seq:
        items:
          $ref: '#/definitions/models.EventConfigSeq'
        type: array
        uniqueItems: true
      type:
        enum:
        - atomic
        - aggregation
        - correlation
        type: string
    required:
    - actions
    - seq
    - type
    type: object
  models.EventConfigSeq:
    properties:
      min_count:
        minimum: 1
        type: integer
      name:
        type: string
    required:
    - min_count
    - name
    type: object
  models.EventInfo:
    properties:
      actions:
        items:
          type: string
        type: array
        uniqueItems: true
      data:
        additionalProperties: true
        type: object
      name:
        maxLength: 100
        type: string
      time:
        minimum: 0
        type: integer
      uniq:
        maxLength: 255
        type: string
    required:
    - data
    - name
    - uniq
    type: object
  models.Group:
    properties:
      created_date:
        type: string
      deleted_at:
        type: string
      hash:
        type: string
      id:
        minimum: 0
        type: integer
      info:
        $ref: '#/definitions/models.GroupInfo'
      updated_at:
        type: string
    required:
    - hash
    - info
    type: object
  models.GroupDependency:
    properties:
      min_agent_version:
        type: string
      min_module_version:
        type: string
      module_name:
        type: string
      policy_id:
        minimum: 0
        type: integer
      source_module_name:
        type: string
      status:
        type: boolean
      type:
        enum:
        - to_receive_data
        - to_send_data
        - to_make_action
        - agent_version
        type: string
    required:
    - source_module_name
    - type
    type: object
  models.GroupInfo:
    properties:
      name:
        $ref: '#/definitions/models.GroupItemLocale'
      system:
        type: boolean
      tags:
        items:
          type: string
        maxItems: 20
        type: array
        uniqueItems: true
    required:
    - name
    - tags
    type: object
  models.GroupItemLocale:
    properties:
      en:
        maxLength: 4096
        type: string
      ru:
        maxLength: 4096
        type: string
    required:
    - en
    - ru
    type: object
  models.Locale:
    properties:
      action_config:
        additionalProperties:
          additionalProperties:
            $ref: '#/definitions/models.ModuleLocaleDesc'
          type: object
        type: object
      actions:
        additionalProperties:
          $ref: '#/definitions/models.ModuleLocaleDesc'
        type: object
      config:
        additionalProperties:
          $ref: '#/definitions/models.ModuleLocaleDesc'
        type: object
      event_config:
        additionalProperties:
          additionalProperties:
            $ref: '#/definitions/models.ModuleLocaleDesc'
          type: object
        type: object
      events:
        additionalProperties:
          $ref: '#/definitions/models.ModuleLocaleDesc'
        type: object
      fields:
        additionalProperties:
          $ref: '#/definitions/models.ModuleLocaleDesc'
        type: object
      module:
        $ref: '#/definitions/models.ModuleLocaleDesc'
      secure_config:
        additionalProperties:
          $ref: '#/definitions/models.ModuleLocaleDesc'
        type: object
      tags:
        additionalProperties:
          $ref: '#/definitions/models.ModuleLocaleDesc'
        type: object
    required:
    - action_config
    - actions
    - config
    - event_config
    - events
    - fields
    - module
    - tags
    type: object
  models.LocaleDesc:
    properties:
      description:
        maxLength: 10000
        type: string
      title:
        maxLength: 300
        type: string
    required:
    - title
    type: object
  models.Login:
    properties:
      mail:
        maxLength: 50
        type: string
      password:
        maxLength: 100
        minLength: 4
        type: string
      service:
        type: string
    required:
    - mail
    - password
    type: object
  models.ModuleA:
    properties:
      action_config_schema:
        type: object
      changelog:
        $ref: '#/definitions/models.Changelog'
      config_schema:
        type: object
      current_action_config:
        $ref: '#/definitions/models.ActionConfig'
      current_config:
        $ref: '#/definitions/models.ModuleConfig'
      current_event_config:
        $ref: '#/definitions/models.EventConfig'
      default_action_config:
        $ref: '#/definitions/models.ActionConfig'
      default_config:
        $ref: '#/definitions/models.ModuleConfig'
      default_event_config:
        $ref: '#/definitions/models.EventConfig'
      deleted_at:
        type: string
      dynamic_dependencies:
        items:
          $ref: '#/definitions/models.DependencyItem'
        type: array
      event_config_schema:
        type: object
      fields_schema:
        type: object
      id:
        minimum: 0
        type: integer
      info:
        $ref: '#/definitions/models.ModuleInfo'
      join_date:
        type: string
      last_module_update:
        type: string
      last_update:
        type: string
      locale:
        $ref: '#/definitions/models.Locale'
      policy_id:
        minimum: 0
        type: integer
      secure_config_schema:
        type: object
      secure_current_config:
        $ref: '#/definitions/models.ModuleSecureConfig'
      secure_default_config:
        $ref: '#/definitions/models.ModuleSecureConfig'
      state:
        enum:
        - draft
        - release
        type: string
      static_dependencies:
        items:
          $ref: '#/definitions/models.DependencyItem'
        type: array
      status:
        enum:
        - joined
        - inactive
        type: string
    required:
    - action_config_schema
    - changelog
    - config_schema
    - current_action_config
    - current_config
    - current_event_config
    - default_action_config
    - default_config
    - default_event_config
    - dynamic_dependencies
    - event_config_schema
    - fields_schema
    - info
    - last_module_update
    - locale
    - static_dependencies
    - status
    type: object
  models.ModuleAShort:
    properties:
      deleted_at:
        type: string
      dynamic_dependencies:
        items:
          $ref: '#/definitions/models.DependencyItem'
        type: array
      id:
        minimum: 0
        type: integer
      info:
        $ref: '#/definitions/models.ModuleInfo'
      last_module_update:
        type: string
      last_update:
        type: string
      locale:
        $ref: '#/definitions/models.Locale'
      policy_id:
        minimum: 0
        type: integer
      state:
        enum:
        - draft
        - release
        type: string
      static_dependencies:
        items:
          $ref: '#/definitions/models.DependencyItem'
        type: array
    required:
    - dynamic_dependencies
    - info
    - last_module_update
    - locale
    - static_dependencies
    type: object
  models.ModuleConfig:
    additionalProperties: true
    type: object
  models.ModuleInfo:
    properties:
      actions:
        items:
          type: string
        maxItems: 50
        type: array
        uniqueItems: true
      events:
        items:
          type: string
        maxItems: 500
        type: array
        uniqueItems: true
      fields:
        items:
          type: string
        maxItems: 300
        type: array
        uniqueItems: true
      name:
        maxLength: 255
        type: string
      os:
        $ref: '#/definitions/models.ModuleInfoOS'
      system:
        type: boolean
      tags:
        items:
          type: string
        maxItems: 20
        type: array
        uniqueItems: true
      template:
        enum:
        - generic
        - empty
        - collector
        - detector
        - responder
        - custom
        type: string
      version:
        $ref: '#/definitions/models.SemVersion'
    required:
    - actions
    - events
    - fields
    - name
    - os
    - tags
    - template
    - version
    type: object
  models.ModuleInfoOS:
    additionalProperties:
      items:
        type: string
      type: array
    type: object
  models.ModuleLocaleDesc:
    additionalProperties:
      $ref: '#/definitions/models.LocaleDesc'
    type: object
  models.ModuleS:
    properties:
      action_config_schema:
        type: object
      changelog:
        $ref: '#/definitions/models.Changelog'
      config_schema:
        type: object
      default_action_config:
        $ref: '#/definitions/models.ActionConfig'
      default_config:
        $ref: '#/definitions/models.ModuleConfig'
      default_event_config:
        $ref: '#/definitions/models.EventConfig'
      event_config_schema:
        type: object
      fields_schema:
        type: object
      id:
        minimum: 0
        type: integer
      info:
        $ref: '#/definitions/models.ModuleInfo'
      last_update:
        type: string
      locale:
        $ref: '#/definitions/models.Locale'
      secure_config_schema:
        type: object
      secure_default_config:
        $ref: '#/definitions/models.ModuleSecureConfig'
      service_type:
        enum:
        - vxmonitor
        type: string
      state:
        enum:
        - draft
        - release
        type: string
      static_dependencies:
        items:
          $ref: '#/definitions/models.DependencyItem'
        type: array
      tenant_id:
        minimum: 0
        type: integer
    required:
    - action_config_schema
    - changelog
    - config_schema
    - default_action_config
    - default_config
    - default_event_config
    - event_config_schema
    - fields_schema
    - info
    - locale
    - static_dependencies
    type: object
  models.ModuleSShort:
    properties:
      changelog:
        $ref: '#/definitions/models.Changelog'
      id:
        minimum: 0
        type: integer
      info:
        $ref: '#/definitions/models.ModuleInfo'
      last_update:
        type: string
      locale:
        $ref: '#/definitions/models.Locale'
      state:
        enum:
        - draft
        - release
        type: string
    required:
    - changelog
    - info
    - locale
    type: object
  models.ModuleSecureConfig:
    additionalProperties:
      $ref: '#/definitions/models.ModuleSecureParameter'
    type: object
  models.ModuleSecureParameter:
    properties:
      server_only:
        type: boolean
      value: {}
    required:
    - server_only
    - value
    type: object
  models.OptionsActions:
    properties:
      config:
        $ref: '#/definitions/models.ActionConfigItem'
      locale:
        $ref: '#/definitions/models.ModuleLocaleDesc'
      module_name:
        type: string
      module_os:
        $ref: '#/definitions/models.ModuleInfoOS'
      name:
        type: string
    required:
    - config
    - locale
    - module_name
    - module_os
    - name
    type: object
  models.OptionsEvents:
    properties:
      config:
        $ref: '#/definitions/models.EventConfigItem'
      locale:
        $ref: '#/definitions/models.ModuleLocaleDesc'
      module_name:
        type: string
      module_os:
        $ref: '#/definitions/models.ModuleInfoOS'
      name:
        type: string
    required:
    - config
    - locale
    - module_name
    - module_os
    - name
    type: object
  models.OptionsFields:
    properties:
      locale:
        $ref: '#/definitions/models.ModuleLocaleDesc'
      module_name:
        type: string
      module_os:
        $ref: '#/definitions/models.ModuleInfoOS'
      name:
        type: string
    required:
    - locale
    - module_name
    - module_os
    - name
    type: object
  models.OptionsTags:
    properties:
      locale:
        $ref: '#/definitions/models.ModuleLocaleDesc'
      module_name:
        type: string
      module_os:
        $ref: '#/definitions/models.ModuleInfoOS'
      name:
        type: string
    required:
    - locale
    - module_name
    - module_os
    - name
    type: object
  models.OptionsVersions:
    properties:
      module_name:
        type: string
      module_os:
        $ref: '#/definitions/models.ModuleInfoOS'
      name:
        type: string
    required:
    - module_name
    - module_os
    - name
    type: object
  models.Password:
    properties:
      confirm_password:
        type: string
      current_password:
        maxLength: 100
        minLength: 8
        type: string
      password:
        maxLength: 100
        type: string
    required:
    - current_password
    - password
    type: object
  models.Policy:
    properties:
      created_date:
        type: string
      deleted_at:
        type: string
      hash:
        type: string
      id:
        minimum: 0
        type: integer
      info:
        $ref: '#/definitions/models.PolicyInfo'
      updated_at:
        type: string
    required:
    - hash
    - info
    type: object
  models.PolicyDependency:
    properties:
      min_agent_version:
        type: string
      min_module_version:
        type: string
      module_name:
        type: string
      source_module_name:
        type: string
      status:
        type: boolean
      type:
        enum:
        - to_receive_data
        - to_send_data
        - to_make_action
        - agent_version
        type: string
    required:
    - source_module_name
    - type
    type: object
  models.PolicyInfo:
    properties:
      name:
        $ref: '#/definitions/models.PolicyItemLocale'
      system:
        type: boolean
      tags:
        items:
          type: string
        maxItems: 20
        type: array
        uniqueItems: true
    required:
    - name
    - tags
    type: object
  models.PolicyItemLocale:
    properties:
      en:
        maxLength: 4096
        type: string
      ru:
        maxLength: 4096
        type: string
    required:
    - en
    - ru
    type: object
  models.ProtoAuthToken:
    properties:
      created_date:
        type: string
      token:
        type: string
      ttl:
        maximum: 94608000
        minimum: 1
        type: integer
    required:
    - token
    - ttl
    type: object
  models.ProtoAuthTokenRequest:
    properties:
      ttl:
        default: 31536000
        maximum: 94608000
        minimum: 1
        type: integer
      type:
        default: browser
        enum:
        - aggregate
        - browser
        - external
        type: string
    required:
    - ttl
    - type
    type: object
  models.Role:
    properties:
      id:
        minimum: 0
        type: integer
      name:
        maxLength: 50
        type: string
    required:
    - name
    type: object
  models.SemVersion:
    properties:
      major:
        minimum: 0
        type: integer
      minor:
        minimum: 0
        type: integer
      patch:
        minimum: 0
        type: integer
    type: object
  models.Service:
    properties:
      hash:
        type: string
      id:
        minimum: 0
        type: integer
      info:
        $ref: '#/definitions/models.ServiceInfo'
      name:
        maxLength: 50
        type: string
      status:
        enum:
        - created
        - active
        - blocked
        - removed
        type: string
      tenant_id:
        minimum: 0
        type: integer
      type:
        enum:
        - vxmonitor
        type: string
    required:
    - hash
    - name
    - status
    - type
    type: object
  models.ServiceInfo:
    properties:
      db:
        $ref: '#/definitions/models.ServiceInfoDB'
      s3:
        $ref: '#/definitions/models.ServiceInfoS3'
      server:
        $ref: '#/definitions/models.ServiceInfoServer'
    required:
    - db
    - s3
    - server
    type: object
  models.ServiceInfoDB:
    properties:
      host:
        maxLength: 50
        type: string
      name:
        maxLength: 50
        type: string
      pass:
        maxLength: 50
        type: string
      port:
        maximum: 65535
        minimum: 1
        type: integer
      user:
        maxLength: 50
        type: string
    required:
    - host
    - name
    - pass
    - port
    - user
    type: object
  models.ServiceInfoS3:
    properties:
      access_key:
        maxLength: 50
        type: string
      bucket_name:
        maxLength: 30
        type: string
      endpoint:
        maxLength: 100
        type: string
      secret_key:
        maxLength: 50
        type: string
    required:
    - access_key
    - bucket_name
    - endpoint
    - secret_key
    type: object
  models.ServiceInfoServer:
    properties:
      host:
        maxLength: 50
        type: string
      port:
        maximum: 65535
        minimum: 1
        type: integer
      proto:
        enum:
        - ws
        - wss
        type: string
    required:
    - host
    - port
    - proto
    type: object
  models.Tenant:
    properties:
      description:
        maxLength: 255
        type: string
      hash:
        type: string
      id:
        minimum: 0
        type: integer
      status:
        enum:
        - active
        - blocked
        type: string
    required:
    - hash
    - status
    type: object
  models.User:
    properties:
      hash:
        type: string
      id:
        minimum: 0
        type: integer
      mail:
        maxLength: 50
        type: string
      name:
        maxLength: 70
        type: string
      role_id:
        minimum: 0
        type: integer
      status:
        enum:
        - created
        - active
        - blocked
        type: string
      tenant_id:
        minimum: 0
        type: integer
      type:
        enum:
        - local
        - oauth
        type: string
    required:
    - mail
    - name
    - status
    - type
    type: object
  models.UserPassword:
    properties:
      hash:
        type: string
      id:
        minimum: 0
        type: integer
      mail:
        maxLength: 50
        type: string
      name:
        maxLength: 70
        type: string
      password:
        maxLength: 100
        type: string
      role_id:
        minimum: 0
        type: integer
      status:
        enum:
        - created
        - active
        - blocked
        type: string
      tenant_id:
        minimum: 0
        type: integer
      type:
        enum:
        - local
        - oauth
        type: string
    required:
    - mail
    - name
    - password
    - status
    - type
    type: object
  models.UserRoleTenant:
    properties:
      hash:
        type: string
      id:
        minimum: 0
        type: integer
      mail:
        maxLength: 50
        type: string
      name:
        maxLength: 70
        type: string
      role:
        $ref: '#/definitions/models.Role'
      role_id:
        minimum: 0
        type: integer
      status:
        enum:
        - created
        - active
        - blocked
        type: string
      tenant:
        $ref: '#/definitions/models.Tenant'
      tenant_id:
        minimum: 0
        type: integer
      type:
        enum:
        - local
        - oauth
        type: string
    required:
    - mail
    - name
    - status
    - type
    type: object
  private.AgentsAction:
    properties:
      action:
        enum:
        - authorize
        - block
        - delete
        - unauthorize
        - move
        type: string
      filters:
        items:
          $ref: '#/definitions/utils.TableFilter'
        type: array
      to:
        minimum: 0
        type: integer
    required:
    - action
    type: object
  private.agent:
    properties:
      agent:
        $ref: '#/definitions/models.Agent'
      details:
        $ref: '#/definitions/private.agentDetails'
    type: object
  private.agentCount:
    properties:
      all:
        type: integer
      authorized:
        type: integer
      blocked:
        type: integer
      unauthorized:
        type: integer
      without_groups:
        type: integer
    type: object
  private.agentDetails:
    properties:
      active_modules:
        type: integer
      consistency:
        type: boolean
      dependencies:
        items:
          $ref: '#/definitions/models.AgentDependency'
        type: array
      group:
        $ref: '#/definitions/models.Group'
      hash:
        type: string
      joined_modules:
        type: string
      modules:
        items:
          $ref: '#/definitions/models.ModuleAShort'
        type: array
      policies:
        items:
          $ref: '#/definitions/models.Policy'
        type: array
      upgrade_task:
        $ref: '#/definitions/models.AgentUpgradeTask'
    type: object
  private.agentInfo:
    properties:
      arch:
        default: amd64
        enum:
        - "386"
        - amd64
        type: string
      name:
        maxLength: 255
        type: string
      os:
        default: linux
        enum:
        - windows
        - linux
        - darwin
        type: string
    required:
    - arch
    - name
    - os
    type: object
  private.agentModuleDetails:
    properties:
      name:
        type: string
      policy:
        $ref: '#/definitions/models.Policy'
      today:
        type: integer
      total:
        type: integer
      update:
        type: boolean
    type: object
  private.agentModules:
    properties:
      details:
        items:
          $ref: '#/definitions/private.agentModuleDetails'
        type: array
      modules:
        items:
          $ref: '#/definitions/models.ModuleA'
        type: array
      total:
        type: integer
    type: object
  private.agents:
    properties:
      agents:
        items:
          $ref: '#/definitions/models.Agent'
        type: array
      details:
        items:
          $ref: '#/definitions/private.agentDetails'
        type: array
      total:
        type: integer
    type: object
  private.agentsActionResult:
    properties:
      total:
        type: integer
    type: object
  private.binaries:
    properties:
      binaries:
        items:
          $ref: '#/definitions/models.Binary'
        type: array
      total:
        type: integer
    type: object
  private.events:
    properties:
      agents:
        items:
          $ref: '#/definitions/models.Agent'
        type: array
      events:
        items:
          $ref: '#/definitions/models.Event'
        type: array
      groups:
        items:
          $ref: '#/definitions/models.Group'
        type: array
      modules:
        items:
          $ref: '#/definitions/models.ModuleAShort'
        type: array
      policies:
        items:
          $ref: '#/definitions/models.Policy'
        type: array
      total:
        type: integer
    type: object
  private.group:
    properties:
      details:
        $ref: '#/definitions/private.groupDetails'
      group:
        $ref: '#/definitions/models.Group'
    type: object
  private.groupDetails:
    properties:
      active_modules:
        type: integer
      agents:
        type: integer
      consistency:
        type: boolean
      dependencies:
        items:
          $ref: '#/definitions/models.GroupDependency'
        type: array
      hash:
        type: string
      joined_modules:
        type: string
      modules:
        items:
          $ref: '#/definitions/models.ModuleAShort'
        type: array
      policies:
        items:
          $ref: '#/definitions/models.Policy'
        type: array
    type: object
  private.groupInfo:
    properties:
      from:
        minimum: 0
        type: integer
      name:
        maxLength: 255
        type: string
      tags:
        items:
          type: string
        type: array
    type: object
  private.groupModuleDetails:
    properties:
      name:
        type: string
      policy:
        $ref: '#/definitions/models.Policy'
      today:
        type: integer
      total:
        type: integer
      update:
        type: boolean
    type: object
  private.groupModules:
    properties:
      details:
        items:
          $ref: '#/definitions/private.groupModuleDetails'
        type: array
      modules:
        items:
          $ref: '#/definitions/models.ModuleA'
        type: array
      total:
        type: integer
    type: object
  private.groupPolicyPatch:
    properties:
      action:
        default: activate
        description: Action on group policy must be one of activate, deactivate
        enum:
        - activate
        - deactivate
        type: string
      policy:
        $ref: '#/definitions/models.Policy'
    required:
    - action
    - policy
    type: object
  private.groups:
    properties:
      details:
        items:
          $ref: '#/definitions/private.groupDetails'
        type: array
      groups:
        items:
          $ref: '#/definitions/models.Group'
        type: array
      total:
        type: integer
    type: object
  private.moduleVersionPatch:
    properties:
      action:
        default: store
        description: Action on group module must be one of store, release
        enum:
        - store
        - release
        type: string
      module:
        $ref: '#/definitions/models.ModuleS'
    required:
    - action
    - module
    type: object
  private.optionsActions:
    properties:
      actions:
        items:
          $ref: '#/definitions/models.OptionsActions'
        type: array
      total:
        type: integer
    type: object
  private.optionsEvents:
    properties:
      events:
        items:
          $ref: '#/definitions/models.OptionsEvents'
        type: array
      total:
        type: integer
    type: object
  private.optionsFields:
    properties:
      fields:
        items:
          $ref: '#/definitions/models.OptionsFields'
        type: array
      total:
        type: integer
    type: object
  private.optionsTags:
    properties:
      tags:
        items:
          $ref: '#/definitions/models.OptionsTags'
        type: array
      total:
        type: integer
    type: object
  private.optionsVersions:
    properties:
      total:
        type: integer
      versions:
        items:
          $ref: '#/definitions/models.OptionsVersions'
        type: array
    type: object
  private.patchAgentAction:
    properties:
      action:
        enum:
        - authorize
        - block
        - delete
        - unauthorize
        - move
        - edit
        type: string
      agent:
        $ref: '#/definitions/models.Agent'
    required:
    - action
    - agent
    type: object
  private.policies:
    properties:
      details:
        items:
          $ref: '#/definitions/private.policyDetails'
        type: array
      policies:
        items:
          $ref: '#/definitions/models.Policy'
        type: array
      total:
        type: integer
    type: object
  private.policy:
    properties:
      details:
        $ref: '#/definitions/private.policyDetails'
      policy:
        $ref: '#/definitions/models.Policy'
    type: object
  private.policyCount:
    properties:
      all:
        type: integer
      without_groups:
        type: integer
    type: object
  private.policyDetails:
    properties:
      active_modules:
        type: integer
      agents:
        type: integer
      consistency:
        type: boolean
      dependencies:
        items:
          $ref: '#/definitions/models.PolicyDependency'
        type: array
      groups:
        items:
          $ref: '#/definitions/models.Group'
        type: array
      hash:
        type: string
      joined_modules:
        type: string
      modules:
        items:
          $ref: '#/definitions/models.ModuleAShort'
        type: array
      update_modules:
        type: boolean
    type: object
  private.policyGroupPatch:
    properties:
      action:
        default: activate
        description: Action on policy group must be one of activate, deactivate
        enum:
        - activate
        - deactivate
        type: string
      group:
        $ref: '#/definitions/models.Group'
    required:
    - action
    - group
    type: object
  private.policyInfo:
    properties:
      from:
        minimum: 0
        type: integer
      name:
        maxLength: 255
        type: string
      tags:
        items:
          type: string
        type: array
    type: object
  private.policyModuleDetails:
    properties:
      active:
        type: boolean
      duplicate:
        type: boolean
      exists:
        type: boolean
      name:
        type: string
      today:
        type: integer
      total:
        type: integer
      update:
        type: boolean
    type: object
  private.policyModulePatch:
    properties:
      action:
        default: update
        description: Action on group module must be one of activate, deactivate, update,
          store
        enum:
        - activate
        - deactivate
        - store
        - update
        type: string
      module:
        $ref: '#/definitions/models.ModuleA'
      version:
        type: string
    required:
    - action
    type: object
  private.policyModules:
    properties:
      details:
        items:
          $ref: '#/definitions/private.policyModuleDetails'
        type: array
      modules:
        items:
          $ref: '#/definitions/models.ModuleA'
        type: array
      total:
        type: integer
    type: object
  private.policyModulesUpdates:
    properties:
      modules:
        items:
          $ref: '#/definitions/models.ModuleA'
        type: array
      policies:
        items:
          $ref: '#/definitions/models.Policy'
        type: array
    type: object
  private.roles:
    properties:
      roles:
        items:
          $ref: '#/definitions/models.Role'
        type: array
      total:
        type: integer
    type: object
  private.services:
    properties:
      services:
        items:
          $ref: '#/definitions/models.Service'
        type: array
      total:
        type: integer
    type: object
  private.systemModuleFile:
    properties:
      data:
        default: base64
        type: string
      path:
        type: string
    required:
    - data
    - path
    type: object
  private.systemModuleFilePatch:
    properties:
      action:
        default: save
        enum:
        - move
        - remove
        - save
        type: string
      data:
        default: base64
        type: string
      newpath:
        type: string
      path:
        type: string
    required:
    - action
    - path
    type: object
  private.systemModules:
    properties:
      modules:
        items:
          $ref: '#/definitions/models.ModuleS'
        type: array
      total:
        type: integer
    type: object
  private.systemShortModules:
    properties:
      modules:
        items:
          $ref: '#/definitions/models.ModuleSShort'
        type: array
      total:
        type: integer
    type: object
  private.tags:
    properties:
      tags:
        items:
          type: string
        type: array
      total:
        type: integer
    type: object
  private.tenants:
    properties:
      tenants:
        items:
          $ref: '#/definitions/models.Tenant'
        type: array
      total:
        type: integer
    type: object
  private.upgradeAgent:
    properties:
      details:
        $ref: '#/definitions/private.upgradeAgentDetails'
      task:
        $ref: '#/definitions/models.AgentUpgradeTask'
    type: object
  private.upgradeAgentDetails:
    properties:
      agent:
        $ref: '#/definitions/models.Agent'
      group:
        $ref: '#/definitions/models.Group'
    type: object
  private.upgradesAgents:
    properties:
      tasks:
        items:
          $ref: '#/definitions/models.AgentUpgradeTask'
        type: array
      total:
        type: integer
    type: object
  private.upgradesAgentsAction:
    properties:
      filters:
        items:
          $ref: '#/definitions/utils.TableFilter'
        type: array
      version:
        type: string
    required:
    - version
    type: object
  private.upgradesAgentsActionResult:
    properties:
      batch:
        type: string
      total:
        type: integer
    type: object
  private.users:
    properties:
      total:
        type: integer
      users:
        items:
          $ref: '#/definitions/models.UserRoleTenant'
        type: array
    type: object
  private.versions:
    properties:
      total:
        type: integer
      versions:
        items:
          type: string
        type: array
    type: object
  public.info:
    properties:
      develop:
        type: boolean
      privileges:
        items:
          type: string
        type: array
      role:
        $ref: '#/definitions/models.Role'
      service:
        $ref: '#/definitions/models.Service'
      services:
        items:
          $ref: '#/definitions/models.Service'
        type: array
      tenant:
        $ref: '#/definitions/models.Tenant'
      type:
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  utils.TableFilter:
    properties:
      field:
        type: string
      value:
        type: object
    required:
    - field
    - value
    type: object
info:
  contact:
    email: admin@vxcontrol.com
    name: Dmitry Nagibin
    url: https://vxcontrol.com
  description: Swagger API for VXControl SOLDR backend product.
  license:
    name: Proprietary License
    url: https://raw.githubusercontent.com/vxcontrol/soldr/master/LICENSE
  termsOfService: http://swagger.io/terms/
  title: SOLDR Swagger API
  version: "1.0"
paths:
  /agents/:
    get:
      parameters:
      - collectionFormat: multi
        description: |-
          Filtering result on server e.g. {"value":[...],"field":"..."}
            field value should be integer or string or array type
        in: query
        items:
          type: string
        name: filters[]
        type: array
      - description: Field to group results by
        in: query
        name: group
        type: string
      - default: en
        description: Language of result data
        enum:
        - en
        - ru
        in: query
        name: lang
        required: true
        type: string
      - default: 1
        description: Number of page (since 1)
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - default: 5
        description: Amount items per page (min -1, max 100, -1 means unlimited)
        in: query
        maximum: 100
        minimum: -1
        name: pageSize
        required: true
        type: integer
      - default: '{}'
        description: |-
          Sorting result on server e.g. {"prop":"...","order":"..."}
            field order is "ascending" or "descending" value
        in: query
        name: sort
        required: true
        type: string
      - default: init
        description: Type of request
        enum:
        - sort
        - filter
        - init
        - page
        - size
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: agents list received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/private.agents'
              type: object
        "400":
          description: invalid query request data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: getting agents not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting agents
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve agents list by filters
      tags:
      - Agents
    post:
      consumes:
      - application/json
      parameters:
      - description: agent info to create one
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/private.agentInfo'
      produces:
      - application/json
      responses:
        "201":
          description: agent created successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Agent'
              type: object
        "400":
          description: invalid agent info
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: creating agent not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on creating agent
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create new agent in service
      tags:
      - Agents
    put:
      consumes:
      - application/json
      parameters:
      - description: action on agents as JSON data
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/private.AgentsAction'
      produces:
      - application/json
      responses:
        "200":
          description: agents updated successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/private.agentsActionResult'
              type: object
        "400":
          description: invalid agents action
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: updating agents not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on updating agents
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update agents public info by action
      tags:
      - Agents
  /agents/{hash}:
    delete:
      parameters:
      - description: agent hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: agent deleted successful
          schema:
            $ref: '#/definitions/SuccessResponse'
        "403":
          description: deleting agent not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: agent not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on deleting agent
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete agent from instance DB
      tags:
      - Agents
    get:
      parameters:
      - description: agent hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: agent info received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/private.agent'
              type: object
        "403":
          description: getting agent info not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: agent not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting agent
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve agent info by agent hash
      tags:
      - Agents
    put:
      consumes:
      - application/json
      parameters:
      - description: agent hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      - description: agent info as JSON data
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/private.patchAgentAction'
      produces:
      - application/json
      responses:
        "200":
          description: agent info updated successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Agent'
              type: object
        "400":
          description: invalid agent info
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: updating agent info not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: agent not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on updating agent
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update agent info by agent hash
      tags:
      - Agents
  /agents/{hash}/modules:
    get:
      parameters:
      - description: agent hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      - collectionFormat: multi
        description: |-
          Filtering result on server e.g. {"value":[...],"field":"..."}
            field value should be integer or string or array type
        in: query
        items:
          type: string
        name: filters[]
        type: array
      - description: Field to group results by
        in: query
        name: group
        type: string
      - default: en
        description: Language of result data
        enum:
        - en
        - ru
        in: query
        name: lang
        required: true
        type: string
      - default: 1
        description: Number of page (since 1)
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - default: 5
        description: Amount items per page (min -1, max 100, -1 means unlimited)
        in: query
        maximum: 100
        minimum: -1
        name: pageSize
        required: true
        type: integer
      - default: '{}'
        description: |-
          Sorting result on server e.g. {"prop":"...","order":"..."}
            field order is "ascending" or "descending" value
        in: query
        name: sort
        required: true
        type: string
      - default: init
        description: Type of request
        enum:
        - sort
        - filter
        - init
        - page
        - size
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: agent modules received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/private.agentModules'
              type: object
        "400":
          description: invalid query request data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: getting agent modules not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: agent or modules not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting agent modules
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve agent modules by agent hash and by filters
      tags:
      - Agents
      - Modules
  /agents/{hash}/modules/{module_name}:
    get:
      parameters:
      - description: agent hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      - description: module name without spaces
        in: path
        name: module_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: agent module data received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.ModuleA'
              type: object
        "403":
          description: getting agent module data not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: agent or module not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting agent module
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve agent module data by agent hash and module name
      tags:
      - Agents
      - Modules
  /agents/{hash}/modules/{module_name}/bmodule.vue:
    get:
      parameters:
      - description: agent hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      - description: module name without spaces
        in: path
        name: module_name
        required: true
        type: string
      - default: main.vue
        description: path to the browser module file
        in: query
        name: file
        type: string
      produces:
      - text/javascript
      - application/javascript
      - application/json
      responses:
        "200":
          description: browser module vue code as a file
          schema:
            type: file
        "403":
          description: getting agent module data not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve browser module vue code by agent hash and module name
      tags:
      - Agents
      - Modules
  /agents/count:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: groups of counted agents retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/private.agentCount'
              type: object
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve groups of counted agents
      tags:
      - Agents
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login form JSON data
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/models.Login'
      produces:
      - application/json
      responses:
        "200":
          description: login successful
          schema:
            $ref: '#/definitions/SuccessResponse'
        "400":
          description: invalid login data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "401":
          description: invalid login or password
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: login not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on login
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Login user into system
      tags:
      - Public
  /auth/logout:
    get:
      parameters:
      - default: /
        description: URI to redirect user there after logout
        in: query
        name: return_uri
        type: string
      produces:
      - application/json
      responses:
        "307":
          description: redirect to input return_uri path
      summary: Logout current user via HTTP redirect
      tags:
      - Public
  /auth/switch-service:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: New service hash to change current one and return new cookie
        in: formData
        name: service
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: switch successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Service'
              type: object
        "400":
          description: invalid service data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: switch service not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on switch service
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Switch current agent server for all next requiest
      tags:
      - Public
  /binaries/vxagent:
    get:
      parameters:
      - collectionFormat: multi
        description: |-
          Filtering result on server e.g. {"value":[...],"field":"..."}
            field value should be integer or string or array type
        in: query
        items:
          type: string
        name: filters[]
        type: array
      - description: Field to group results by
        in: query
        name: group
        type: string
      - default: en
        description: Language of result data
        enum:
        - en
        - ru
        in: query
        name: lang
        required: true
        type: string
      - default: 1
        description: Number of page (since 1)
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - default: 5
        description: Amount items per page (min -1, max 100, -1 means unlimited)
        in: query
        maximum: 100
        minimum: -1
        name: pageSize
        required: true
        type: integer
      - default: '{}'
        description: |-
          Sorting result on server e.g. {"prop":"...","order":"..."}
            field order is "ascending" or "descending" value
        in: query
        name: sort
        required: true
        type: string
      - default: init
        description: Type of request
        enum:
        - sort
        - filter
        - init
        - page
        - size
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: agent binaries list received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/private.binaries'
              type: object
        "400":
          description: invalid query request data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: getting agent binaries not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting agent binaries
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve agent binaries list by filters
      tags:
      - Binaries
  /binaries/vxagent/{os}/{arch}/{version}:
    get:
      parameters:
      - default: linux
        description: agent info OS
        enum:
        - windows
        - linux
        - darwin
        in: path
        name: os
        required: true
        type: string
      - default: amd64
        description: agent info arch
        enum:
        - "386"
        - amd64
        in: path
        name: arch
        required: true
        type: string
      - default: latest
        description: agent version string according semantic version format
        in: path
        name: version
        required: true
        type: string
      produces:
      - application/octet-stream
      - application/json
      responses:
        "200":
          description: agent binary as a file
          schema:
            type: file
        "400":
          description: invalid agent info
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: getting agent binary file not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: agent binary file not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting agent binary file
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve agent binary file by OS and arch
      tags:
      - Binaries
  /events/:
    get:
      parameters:
      - collectionFormat: multi
        description: |-
          Filtering result on server e.g. {"value":[...],"field":"..."}
            field value should be integer or string or array type
        in: query
        items:
          type: string
        name: filters[]
        type: array
      - description: Field to group results by
        in: query
        name: group
        type: string
      - default: en
        description: Language of result data
        enum:
        - en
        - ru
        in: query
        name: lang
        required: true
        type: string
      - default: 1
        description: Number of page (since 1)
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - default: 5
        description: Amount items per page (min -1, max 100, -1 means unlimited)
        in: query
        maximum: 100
        minimum: -1
        name: pageSize
        required: true
        type: integer
      - default: '{}'
        description: |-
          Sorting result on server e.g. {"prop":"...","order":"..."}
            field order is "ascending" or "descending" value
        in: query
        name: sort
        required: true
        type: string
      - default: init
        description: Type of request
        enum:
        - sort
        - filter
        - init
        - page
        - size
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: events list received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/private.events'
              type: object
        "400":
          description: invalid query request data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: getting events not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting events
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve events list by filters
      tags:
      - Events
  /export/modules/{module_name}/versions/{version}:
    post:
      parameters:
      - description: module name without spaces
        in: path
        name: module_name
        required: true
        type: string
      - default: latest
        description: module version string according semantic version format or 'latest'
          or 'all'
        in: path
        name: version
        required: true
        type: string
      produces:
      - application/octet-stream
      - application/json
      responses:
        "200":
          description: system module archive file
          schema:
            type: file
        "403":
          description: exporting system module content not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: system module or version not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on exporting system module
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Export of zip archive which contains selected system module and versions
      tags:
      - Modules
      - Export
  /groups/:
    get:
      parameters:
      - collectionFormat: multi
        description: |-
          Filtering result on server e.g. {"value":[...],"field":"..."}
            field value should be integer or string or array type
        in: query
        items:
          type: string
        name: filters[]
        type: array
      - description: Field to group results by
        in: query
        name: group
        type: string
      - default: en
        description: Language of result data
        enum:
        - en
        - ru
        in: query
        name: lang
        required: true
        type: string
      - default: 1
        description: Number of page (since 1)
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - default: 5
        description: Amount items per page (min -1, max 100, -1 means unlimited)
        in: query
        maximum: 100
        minimum: -1
        name: pageSize
        required: true
        type: integer
      - default: '{}'
        description: |-
          Sorting result on server e.g. {"prop":"...","order":"..."}
            field order is "ascending" or "descending" value
        in: query
        name: sort
        required: true
        type: string
      - default: init
        description: Type of request
        enum:
        - sort
        - filter
        - init
        - page
        - size
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: groups list received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/private.groups'
              type: object
        "400":
          description: invalid query request data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: getting groups not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: groups not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting groups
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve groups list by filters
      tags:
      - Groups
    post:
      consumes:
      - application/json
      parameters:
      - description: group info to create one
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/private.groupInfo'
      produces:
      - application/json
      responses:
        "201":
          description: group created successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Group'
              type: object
        "400":
          description: invalid group info
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: creating group not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on creating group
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create new group in service
      tags:
      - Groups
  /groups/{hash}:
    delete:
      parameters:
      - description: group hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: group deleted successful
          schema:
            $ref: '#/definitions/SuccessResponse'
        "403":
          description: deleting group not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: group not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on deleting group
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete group from instance DB
      tags:
      - Groups
    get:
      parameters:
      - description: group hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: group info received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/private.group'
              type: object
        "403":
          description: getting group info not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: group not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting group
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve group info by group hash
      tags:
      - Groups
    put:
      consumes:
      - application/json
      parameters:
      - description: group hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      - description: group info as JSON data
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/models.Group'
      produces:
      - application/json
      responses:
        "200":
          description: group info updated successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Group'
              type: object
        "400":
          description: invalid group info
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: updating group info not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: group not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on updating group
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update group info by group hash
      tags:
      - Groups
  /groups/{hash}/modules:
    get:
      parameters:
      - description: group hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      - collectionFormat: multi
        description: |-
          Filtering result on server e.g. {"value":[...],"field":"..."}
            field value should be integer or string or array type
        in: query
        items:
          type: string
        name: filters[]
        type: array
      - description: Field to group results by
        in: query
        name: group
        type: string
      - default: en
        description: Language of result data
        enum:
        - en
        - ru
        in: query
        name: lang
        required: true
        type: string
      - default: 1
        description: Number of page (since 1)
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - default: 5
        description: Amount items per page (min -1, max 100, -1 means unlimited)
        in: query
        maximum: 100
        minimum: -1
        name: pageSize
        required: true
        type: integer
      - default: '{}'
        description: |-
          Sorting result on server e.g. {"prop":"...","order":"..."}
            field order is "ascending" or "descending" value
        in: query
        name: sort
        required: true
        type: string
      - default: init
        description: Type of request
        enum:
        - sort
        - filter
        - init
        - page
        - size
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: group modules received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/private.groupModules'
              type: object
        "400":
          description: invalid query request data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: getting group modules not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: group or modules not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting group modules
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve group modules by group hash and by filters
      tags:
      - Groups
      - Modules
  /groups/{hash}/modules/{module_name}:
    get:
      parameters:
      - description: group hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      - description: module name without spaces
        in: path
        name: module_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: group module data received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.ModuleA'
              type: object
        "403":
          description: getting group module data not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: group or module not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting group
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve group module data by group hash and module name
      tags:
      - Groups
      - Modules
  /groups/{hash}/modules/{module_name}/bmodule.vue:
    get:
      parameters:
      - description: group hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      - description: module name without spaces
        in: path
        name: module_name
        required: true
        type: string
      - default: main.vue
        description: path to the browser module file
        in: query
        name: file
        type: string
      produces:
      - text/javascript
      - application/javascript
      - application/json
      responses:
        "200":
          description: browser module vue code as a file
          schema:
            type: file
        "403":
          description: getting group module data not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve browser module vue code by group hash and module name
      tags:
      - Groups
      - Modules
  /groups/{hash}/policies:
    put:
      consumes:
      - application/json
      parameters:
      - description: group hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      - description: action on group policy as JSON data (activate, deactivate)
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/private.groupPolicyPatch'
      produces:
      - application/json
      responses:
        "200":
          description: group policy patched successful
          schema:
            $ref: '#/definitions/SuccessResponse'
        "400":
          description: invalid patch request data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: updating group policy not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: group or policy not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting updating group policy
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update or patch group policy by group hash and policy object
      tags:
      - Groups
      - Policies
  /import/modules/{module_name}/versions/{version}:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: module name without spaces
        in: path
        name: module_name
        required: true
        type: string
      - default: all
        description: module version string according semantic version format or 'all'
        in: path
        name: version
        required: true
        type: string
      - default: true
        description: override system module files and records in global DB
        in: query
        name: rewrite
        required: true
        type: boolean
      - description: system module archive file
        in: formData
        name: archive
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: system module archive uploaded successful
          schema:
            $ref: '#/definitions/SuccessResponse'
        "400":
          description: bad format input system module archive
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: importing system module content not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: system module or version in archive not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on importing system module
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Import from zip archive which contains selected system module and versions
      tags:
      - Modules
      - Import
  /info:
    get:
      parameters:
      - description: boolean arg to refresh current cookie, use explicit false
        in: query
        name: refresh_cookie
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: info received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/public.info'
              type: object
        "403":
          description: getting info not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting information about system and config
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve current user and system settings
      tags:
      - Public
  /modules/:
    get:
      parameters:
      - collectionFormat: multi
        description: |-
          Filtering result on server e.g. {"value":[...],"field":"..."}
            field value should be integer or string or array type
        in: query
        items:
          type: string
        name: filters[]
        type: array
      - description: Field to group results by
        in: query
        name: group
        type: string
      - default: en
        description: Language of result data
        enum:
        - en
        - ru
        in: query
        name: lang
        required: true
        type: string
      - default: 1
        description: Number of page (since 1)
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - default: 5
        description: Amount items per page (min -1, max 100, -1 means unlimited)
        in: query
        maximum: 100
        minimum: -1
        name: pageSize
        required: true
        type: integer
      - default: '{}'
        description: |-
          Sorting result on server e.g. {"prop":"...","order":"..."}
            field order is "ascending" or "descending" value
        in: query
        name: sort
        required: true
        type: string
      - default: init
        description: Type of request
        enum:
        - sort
        - filter
        - init
        - page
        - size
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: system modules received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/private.systemModules'
              type: object
        "400":
          description: invalid query request data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: getting system modules not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting system modules
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve system modules by filters
      tags:
      - Modules
    post:
      consumes:
      - application/json
      parameters:
      - description: module info to create one
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/models.ModuleInfo'
      produces:
      - application/json
      responses:
        "201":
          description: system module created successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.ModuleS'
              type: object
        "400":
          description: invalid system module info
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: creating system module not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on creating system module
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create new system module from template
      tags:
      - Modules
  /modules/{module_name}:
    delete:
      parameters:
      - description: module name without spaces
        in: path
        name: module_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: system module deleted successful
          schema:
            $ref: '#/definitions/SuccessResponse'
        "403":
          description: deleting system module not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: system module or services not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on deleting system module
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete system module from all DBs and S3 storage
      tags:
      - Modules
  /modules/{module_name}/versions/:
    get:
      parameters:
      - description: module name without spaces
        in: path
        name: module_name
        required: true
        type: string
      - collectionFormat: multi
        description: |-
          Filtering result on server e.g. {"value":[...],"field":"..."}
            field value should be integer or string or array type
        in: query
        items:
          type: string
        name: filters[]
        type: array
      - description: Field to group results by
        in: query
        name: group
        type: string
      - default: en
        description: Language of result data
        enum:
        - en
        - ru
        in: query
        name: lang
        required: true
        type: string
      - default: 1
        description: Number of page (since 1)
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - default: 5
        description: Amount items per page (min -1, max 100, -1 means unlimited)
        in: query
        maximum: 100
        minimum: -1
        name: pageSize
        required: true
        type: integer
      - default: '{}'
        description: |-
          Sorting result on server e.g. {"prop":"...","order":"..."}
            field order is "ascending" or "descending" value
        in: query
        name: sort
        required: true
        type: string
      - default: init
        description: Type of request
        enum:
        - sort
        - filter
        - init
        - page
        - size
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: system modules received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/private.systemShortModules'
              type: object
        "400":
          description: invalid query request data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: getting system modules not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting system modules
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve all version for system module by filters and module name
      tags:
      - Modules
  /modules/{module_name}/versions/{version}:
    delete:
      parameters:
      - description: module name without spaces
        in: path
        name: module_name
        required: true
        type: string
      - default: latest
        description: module version string according semantic version format
        in: path
        name: version
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: system module deleted successful
          schema:
            $ref: '#/definitions/SuccessResponse'
        "403":
          description: deleting system module not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: system module not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on deleting system module
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete the version system module from global DB and global S3 storage
      tags:
      - Modules
    get:
      parameters:
      - description: module name without spaces
        in: path
        name: module_name
        required: true
        type: string
      - default: latest
        description: module version string according semantic version format
        in: path
        name: version
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: system module data received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.ModuleS'
              type: object
        "403":
          description: getting system module data not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: system module not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting system module
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve system module data by module name and version
      tags:
      - Modules
    post:
      consumes:
      - application/json
      parameters:
      - description: module name without spaces
        in: path
        name: module_name
        required: true
        type: string
      - description: module version string according semantic version format
        in: path
        name: version
        required: true
        type: string
      - description: module changelog to add to created module
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/models.ChangelogVersion'
      produces:
      - application/json
      responses:
        "201":
          description: system module created successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.ModuleS'
              type: object
        "400":
          description: invalid system module info
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: creating system module not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: system module not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on creating system module
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create new system module version from latest released version
      tags:
      - Modules
    put:
      consumes:
      - application/json
      parameters:
      - description: module name without spaces
        in: path
        name: module_name
        required: true
        type: string
      - default: latest
        description: module version string according semantic version format
        in: path
        name: version
        required: true
        type: string
      - description: module info to create one
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/private.moduleVersionPatch'
      produces:
      - application/json
      responses:
        "200":
          description: system module updated successful
          schema:
            $ref: '#/definitions/SuccessResponse'
        "403":
          description: updating system module not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: system module or services not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on updating system module
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update the version of system module to global DB and global S3 storage
      tags:
      - Modules
  /modules/{module_name}/versions/{version}/files:
    get:
      parameters:
      - description: module name without spaces
        in: path
        name: module_name
        required: true
        type: string
      - default: latest
        description: module version string according semantic version format
        in: path
        name: version
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: system module files received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  items:
                    type: string
                  type: array
              type: object
        "403":
          description: getting system module files not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: system module not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting system module files
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve system module files (relative path) by module name and version
      tags:
      - Modules
  /modules/{module_name}/versions/{version}/files/file:
    get:
      parameters:
      - description: module name without spaces
        in: path
        name: module_name
        required: true
        type: string
      - default: latest
        description: module version string according semantic version format
        in: path
        name: version
        required: true
        type: string
      - description: relative path to module file
        in: query
        name: path
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: system module file content received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/private.systemModuleFile'
              type: object
        "403":
          description: getting system module file content not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: system module not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting system module file
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve system module file content (in base64) by module name, version
        and relative path
      tags:
      - Modules
    put:
      consumes:
      - application/json
      parameters:
      - description: module name without spaces
        in: path
        name: module_name
        required: true
        type: string
      - default: latest
        description: module version string according semantic version format
        in: path
        name: version
        required: true
        type: string
      - description: action, relative path and file content for module file
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/private.systemModuleFilePatch'
      produces:
      - application/json
      responses:
        "200":
          description: action on system module file did successful
          schema:
            $ref: '#/definitions/SuccessResponse'
        "403":
          description: making action on system module file not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: system module not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on making action system module file
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Patch system module file and content (in base64) by module name, version
        and relative path
      tags:
      - Modules
  /modules/{module_name}/versions/{version}/options/{option_name}:
    get:
      parameters:
      - description: module name without spaces
        in: path
        name: module_name
        required: true
        type: string
      - default: latest
        description: module version string according semantic version format
        in: path
        name: version
        required: true
        type: string
      - description: module option without spaces
        enum:
        - id
        - tenant_id
        - service_type
        - state
        - config_schema
        - default_config
        - static_dependencies
        - fields_schema
        - action_config_schema
        - default_action_config
        - event_config_schema
        - default_event_config
        - changelog
        - locale
        - info
        - last_update
        - event_config_schema_definitions
        - action_config_schema_definitions
        in: path
        name: option_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: module option received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  type: object
              type: object
        "403":
          description: getting module option not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: system module not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting module option
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve rendered Event Config Schema of system module data by module
        name and version
      tags:
      - Modules
  /modules/{module_name}/versions/{version}/updates:
    get:
      parameters:
      - description: module name without spaces
        in: path
        name: module_name
        required: true
        type: string
      - default: latest
        description: module version string according semantic version format
        in: path
        name: version
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: policy modules list received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/private.policyModulesUpdates'
              type: object
        "403":
          description: getting policy modules list not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: system module not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting policy modules list to update
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve policy modules list ready to update by system module name
        and version
      tags:
      - Modules
    post:
      consumes:
      - application/json
      parameters:
      - description: module name without spaces
        in: path
        name: module_name
        required: true
        type: string
      - default: latest
        description: module version string according semantic version format
        in: path
        name: version
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: policy modules update run successful
          schema:
            $ref: '#/definitions/SuccessResponse'
        "403":
          description: running policy modules updates not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: system module not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on running policy modules updates
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Run policy modules update by system module name and version
      tags:
      - Modules
  /notifications/subscribe/:
    get:
      parameters:
      - default: all
        description: list of events type to get from notification service (support
          of multiple choices)
        enum:
        - all
        - create-agent
        - update-agent
        - delete-agent
        - create-group
        - update-group
        - delete-group
        - create-policy
        - update-policy
        - delete-policy
        - create-module
        - update-module
        - delete-module
        - create-group-to-policy
        - delete-group-to-policy
        in: query
        name: list
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: fake response because here will be upgrade to websocket
          schema:
            $ref: '#/definitions/SuccessResponse'
        "500":
          description: internal error on upgraging to websocket
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve events via websocket connections on changing or creating or
        deleting instance entities by filter
      tags:
      - Notifications
  /options/actions:
    get:
      parameters:
      - collectionFormat: multi
        description: |-
          Filtering result on server e.g. {"value":[...],"field":"..."}
            field value should be integer or string or array type
        in: query
        items:
          type: string
        name: filters[]
        type: array
      - description: Field to group results by
        in: query
        name: group
        type: string
      - default: en
        description: Language of result data
        enum:
        - en
        - ru
        in: query
        name: lang
        required: true
        type: string
      - default: 1
        description: Number of page (since 1)
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - default: 5
        description: Amount items per page (min -1, max 100, -1 means unlimited)
        in: query
        maximum: 100
        minimum: -1
        name: pageSize
        required: true
        type: integer
      - default: '{}'
        description: |-
          Sorting result on server e.g. {"prop":"...","order":"..."}
            field order is "ascending" or "descending" value
        in: query
        name: sort
        required: true
        type: string
      - default: init
        description: Type of request
        enum:
        - sort
        - filter
        - init
        - page
        - size
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: global action list received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/private.optionsActions'
              type: object
        "400":
          description: invalid query request data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: getting global action list not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting global action list
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve global action list by filters
      tags:
      - Modules
      - Options
  /options/events:
    get:
      parameters:
      - collectionFormat: multi
        description: |-
          Filtering result on server e.g. {"value":[...],"field":"..."}
            field value should be integer or string or array type
        in: query
        items:
          type: string
        name: filters[]
        type: array
      - description: Field to group results by
        in: query
        name: group
        type: string
      - default: en
        description: Language of result data
        enum:
        - en
        - ru
        in: query
        name: lang
        required: true
        type: string
      - default: 1
        description: Number of page (since 1)
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - default: 5
        description: Amount items per page (min -1, max 100, -1 means unlimited)
        in: query
        maximum: 100
        minimum: -1
        name: pageSize
        required: true
        type: integer
      - default: '{}'
        description: |-
          Sorting result on server e.g. {"prop":"...","order":"..."}
            field order is "ascending" or "descending" value
        in: query
        name: sort
        required: true
        type: string
      - default: init
        description: Type of request
        enum:
        - sort
        - filter
        - init
        - page
        - size
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: global event list received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/private.optionsEvents'
              type: object
        "400":
          description: invalid query request data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: getting global event list not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting global event list
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve global event list by filters
      tags:
      - Modules
      - Options
  /options/fields:
    get:
      parameters:
      - collectionFormat: multi
        description: |-
          Filtering result on server e.g. {"value":[...],"field":"..."}
            field value should be integer or string or array type
        in: query
        items:
          type: string
        name: filters[]
        type: array
      - description: Field to group results by
        in: query
        name: group
        type: string
      - default: en
        description: Language of result data
        enum:
        - en
        - ru
        in: query
        name: lang
        required: true
        type: string
      - default: 1
        description: Number of page (since 1)
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - default: 5
        description: Amount items per page (min -1, max 100, -1 means unlimited)
        in: query
        maximum: 100
        minimum: -1
        name: pageSize
        required: true
        type: integer
      - default: '{}'
        description: |-
          Sorting result on server e.g. {"prop":"...","order":"..."}
            field order is "ascending" or "descending" value
        in: query
        name: sort
        required: true
        type: string
      - default: init
        description: Type of request
        enum:
        - sort
        - filter
        - init
        - page
        - size
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: global field list received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/private.optionsFields'
              type: object
        "400":
          description: invalid query request data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: getting global field list not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting global field list
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve global field list by filters
      tags:
      - Modules
      - Options
  /options/tags:
    get:
      parameters:
      - collectionFormat: multi
        description: |-
          Filtering result on server e.g. {"value":[...],"field":"..."}
            field value should be integer or string or array type
        in: query
        items:
          type: string
        name: filters[]
        type: array
      - description: Field to group results by
        in: query
        name: group
        type: string
      - default: en
        description: Language of result data
        enum:
        - en
        - ru
        in: query
        name: lang
        required: true
        type: string
      - default: 1
        description: Number of page (since 1)
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - default: 5
        description: Amount items per page (min -1, max 100, -1 means unlimited)
        in: query
        maximum: 100
        minimum: -1
        name: pageSize
        required: true
        type: integer
      - default: '{}'
        description: |-
          Sorting result on server e.g. {"prop":"...","order":"..."}
            field order is "ascending" or "descending" value
        in: query
        name: sort
        required: true
        type: string
      - default: init
        description: Type of request
        enum:
        - sort
        - filter
        - init
        - page
        - size
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: global tag list received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/private.optionsTags'
              type: object
        "400":
          description: invalid query request data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: getting global tag list not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting global tag list
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve global tag list by filters
      tags:
      - Modules
      - Options
  /options/versions:
    get:
      parameters:
      - collectionFormat: multi
        description: |-
          Filtering result on server e.g. {"value":[...],"field":"..."}
            field value should be integer or string or array type
        in: query
        items:
          type: string
        name: filters[]
        type: array
      - description: Field to group results by
        in: query
        name: group
        type: string
      - default: en
        description: Language of result data
        enum:
        - en
        - ru
        in: query
        name: lang
        required: true
        type: string
      - default: 1
        description: Number of page (since 1)
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - default: 5
        description: Amount items per page (min -1, max 100, -1 means unlimited)
        in: query
        maximum: 100
        minimum: -1
        name: pageSize
        required: true
        type: integer
      - default: '{}'
        description: |-
          Sorting result on server e.g. {"prop":"...","order":"..."}
            field order is "ascending" or "descending" value
        in: query
        name: sort
        required: true
        type: string
      - default: init
        description: Type of request
        enum:
        - sort
        - filter
        - init
        - page
        - size
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: global version list received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/private.optionsVersions'
              type: object
        "400":
          description: invalid query request data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: getting global version list not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting global version list
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve global version list by filters
      tags:
      - Modules
      - Options
  /policies/:
    get:
      parameters:
      - collectionFormat: multi
        description: |-
          Filtering result on server e.g. {"value":[...],"field":"..."}
            field value should be integer or string or array type
        in: query
        items:
          type: string
        name: filters[]
        type: array
      - description: Field to group results by
        in: query
        name: group
        type: string
      - default: en
        description: Language of result data
        enum:
        - en
        - ru
        in: query
        name: lang
        required: true
        type: string
      - default: 1
        description: Number of page (since 1)
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - default: 5
        description: Amount items per page (min -1, max 100, -1 means unlimited)
        in: query
        maximum: 100
        minimum: -1
        name: pageSize
        required: true
        type: integer
      - default: '{}'
        description: |-
          Sorting result on server e.g. {"prop":"...","order":"..."}
            field order is "ascending" or "descending" value
        in: query
        name: sort
        required: true
        type: string
      - default: init
        description: Type of request
        enum:
        - sort
        - filter
        - init
        - page
        - size
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: policies list received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/private.policies'
              type: object
        "400":
          description: invalid query request data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: getting policies not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: policies not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting policies
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve policies list by filters
      tags:
      - Policies
    post:
      consumes:
      - application/json
      parameters:
      - description: policy info to create one
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/private.policyInfo'
      produces:
      - application/json
      responses:
        "201":
          description: policy created successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Policy'
              type: object
        "400":
          description: invalid policy info
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: creating policy not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on creating policy
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create new policy in service
      tags:
      - Policies
  /policies/{hash}:
    delete:
      parameters:
      - description: policy hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: policy deleted successful
          schema:
            $ref: '#/definitions/SuccessResponse'
        "403":
          description: deleting policy not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: policy not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on deleting policy
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete policy from instance DB
      tags:
      - Policies
    get:
      parameters:
      - description: policy hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: policy info received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/private.policy'
              type: object
        "403":
          description: getting policy info not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: policy not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting policy
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve policy info by policy hash
      tags:
      - Policies
    put:
      consumes:
      - application/json
      parameters:
      - description: policy hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      - description: policy info as JSON data
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/models.Policy'
      produces:
      - application/json
      responses:
        "200":
          description: policy info updated successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Policy'
              type: object
        "400":
          description: invalid policy info
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: updating policy info not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: policy not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on updating policy
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update policy info by policy hash
      tags:
      - Policies
  /policies/{hash}/groups:
    put:
      consumes:
      - application/json
      parameters:
      - description: policy hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      - description: action on policy group as JSON data (activate, deactivate)
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/private.policyGroupPatch'
      produces:
      - application/json
      responses:
        "200":
          description: policy group patched successful
          schema:
            $ref: '#/definitions/SuccessResponse'
        "400":
          description: invalid patch request data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: updating policy group not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: policy or group not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on updating policy group
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update or patch policy group by policy hash and group object
      tags:
      - Policies
      - Groups
  /policies/{hash}/modules:
    get:
      parameters:
      - description: policy hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      - collectionFormat: multi
        description: |-
          Filtering result on server e.g. {"value":[...],"field":"..."}
            field value should be integer or string or array type
        in: query
        items:
          type: string
        name: filters[]
        type: array
      - description: Field to group results by
        in: query
        name: group
        type: string
      - default: en
        description: Language of result data
        enum:
        - en
        - ru
        in: query
        name: lang
        required: true
        type: string
      - default: 1
        description: Number of page (since 1)
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - default: 5
        description: Amount items per page (min -1, max 100, -1 means unlimited)
        in: query
        maximum: 100
        minimum: -1
        name: pageSize
        required: true
        type: integer
      - default: '{}'
        description: |-
          Sorting result on server e.g. {"prop":"...","order":"..."}
            field order is "ascending" or "descending" value
        in: query
        name: sort
        required: true
        type: string
      - default: init
        description: Type of request
        enum:
        - sort
        - filter
        - init
        - page
        - size
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: policy modules received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/private.policyModules'
              type: object
        "400":
          description: invalid query request data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: getting policy modules not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: policy or modules not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting policy modules
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve policy modules by policy hash and by filters
      tags:
      - Policies
      - Modules
  /policies/{hash}/modules/{module_name}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: policy hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      - description: module name without spaces
        in: path
        name: module_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: policy module deleted successful
          schema:
            $ref: '#/definitions/SuccessResponse'
        "403":
          description: deleting policy module not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: policy or module not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on deleting policy module
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete module instance by policy hash and module name
      tags:
      - Policies
      - Modules
    get:
      parameters:
      - description: policy hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      - description: module name without spaces
        in: path
        name: module_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: policy module data received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.ModuleA'
              type: object
        "403":
          description: getting policy module data not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: policy or module not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting policy module
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve policy module data by policy hash and module name
      tags:
      - Policies
      - Modules
    put:
      consumes:
      - application/json
      parameters:
      - description: policy hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      - description: module name without spaces
        in: path
        name: module_name
        required: true
        type: string
      - description: action on policy module as JSON data (activate, deactivate, store,
          update)
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/private.policyModulePatch'
      produces:
      - application/json
      responses:
        "200":
          description: policy module patched successful
          schema:
            $ref: '#/definitions/SuccessResponse'
        "403":
          description: updating policy module not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: policy or module not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on updating policy module
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update or patch policy module data by policy hash and module name
      tags:
      - Policies
      - Modules
  /policies/{hash}/modules/{module_name}/bmodule.vue:
    get:
      parameters:
      - description: policy hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      - description: module name without spaces
        in: path
        name: module_name
        required: true
        type: string
      - default: main.vue
        description: path to the browser module file
        in: query
        name: file
        type: string
      produces:
      - text/javascript
      - application/javascript
      - application/json
      responses:
        "200":
          description: browser module vue code as a file
          schema:
            type: file
        "403":
          description: getting policy module data not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve browser module vue code by policy hash and module name
      tags:
      - Policies
      - Modules
  /policies/{hash}/modules/{module_name}/secure_config:
    post:
      consumes:
      - application/json
      parameters:
      - description: policy hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      - description: module name without spaces
        in: path
        name: module_name
        required: true
        type: string
      - description: param name and value to be set
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/models.ModuleConfig'
      produces:
      - application/json
      responses:
        "200":
          description: parameter updated successfully
          schema:
            $ref: '#/definitions/SuccessResponse'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: updating parameter not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: policy or module not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on updating secured parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Set parameter value in secured current config for a module
      tags:
      - Policies
      - Modules
  /policies/{hash}/modules/{module_name}/secure_config/{param_name}:
    get:
      parameters:
      - description: policy hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      - description: module name without spaces
        in: path
        name: module_name
        required: true
        type: string
      - description: parameter name without spaces
        in: path
        name: param_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: secured param value received successfully
          schema:
            $ref: '#/definitions/models.ModuleConfig'
        "403":
          description: get secured parameter not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: policy, module or parameter not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting module secured parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get parameter value in secured current config for a module
      tags:
      - Policies
      - Modules
  /policies/count:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: groups of counted agents policies successfully
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/private.policyCount'
              type: object
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve groups of counted policies
      tags:
      - Policies
  /roles/:
    get:
      parameters:
      - collectionFormat: multi
        description: |-
          Filtering result on server e.g. {"value":[...],"field":"..."}
            field value should be integer or string or array type
        in: query
        items:
          type: string
        name: filters[]
        type: array
      - description: Field to group results by
        in: query
        name: group
        type: string
      - default: en
        description: Language of result data
        enum:
        - en
        - ru
        in: query
        name: lang
        required: true
        type: string
      - default: 1
        description: Number of page (since 1)
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - default: 5
        description: Amount items per page (min -1, max 100, -1 means unlimited)
        in: query
        maximum: 100
        minimum: -1
        name: pageSize
        required: true
        type: integer
      - default: '{}'
        description: |-
          Sorting result on server e.g. {"prop":"...","order":"..."}
            field order is "ascending" or "descending" value
        in: query
        name: sort
        required: true
        type: string
      - default: init
        description: Type of request
        enum:
        - sort
        - filter
        - init
        - page
        - size
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: roles list received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/private.roles'
              type: object
        "400":
          description: invalid query request data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: getting roles not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting roles
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve roles list
      tags:
      - Roles
  /services/:
    get:
      parameters:
      - collectionFormat: multi
        description: |-
          Filtering result on server e.g. {"value":[...],"field":"..."}
            field value should be integer or string or array type
        in: query
        items:
          type: string
        name: filters[]
        type: array
      - description: Field to group results by
        in: query
        name: group
        type: string
      - default: en
        description: Language of result data
        enum:
        - en
        - ru
        in: query
        name: lang
        required: true
        type: string
      - default: 1
        description: Number of page (since 1)
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - default: 5
        description: Amount items per page (min -1, max 100, -1 means unlimited)
        in: query
        maximum: 100
        minimum: -1
        name: pageSize
        required: true
        type: integer
      - default: '{}'
        description: |-
          Sorting result on server e.g. {"prop":"...","order":"..."}
            field order is "ascending" or "descending" value
        in: query
        name: sort
        required: true
        type: string
      - default: init
        description: Type of request
        enum:
        - sort
        - filter
        - init
        - page
        - size
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: services list received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/private.services'
              type: object
        "400":
          description: invalid query request data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: getting services not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting services
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve services list by filters
      tags:
      - Services
    post:
      consumes:
      - application/json
      parameters:
      - description: service model to create from
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/models.Service'
      produces:
      - application/json
      responses:
        "201":
          description: service created successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Service'
              type: object
        "400":
          description: invalid service request data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: creating service not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on creating service
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create new service
      tags:
      - Services
  /services/{hash}:
    delete:
      parameters:
      - description: hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: service deleted successful
          schema:
            $ref: '#/definitions/SuccessResponse'
        "403":
          description: deleting service not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: service not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on deleting service
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete service by hash
      tags:
      - Services
    get:
      parameters:
      - description: hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: service received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Service'
              type: object
        "403":
          description: getting service not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: service not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting service
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve service by hash
      tags:
      - Services
    put:
      parameters:
      - description: service model to update
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/models.Service'
      - description: service hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: service updated successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Service'
              type: object
        "400":
          description: invalid service request data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: updating service not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: service not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on updating service
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update service
      tags:
      - Services
  /tags/:
    get:
      parameters:
      - collectionFormat: multi
        description: |-
          Filtering result on server e.g. {"value":[...],"field":"..."}
            field value should be integer or string or array type
        in: query
        items:
          type: string
        name: filters[]
        type: array
      - description: Field to group results by
        in: query
        name: group
        type: string
      - default: en
        description: Language of result data
        enum:
        - en
        - ru
        in: query
        name: lang
        required: true
        type: string
      - default: 1
        description: Number of page (since 1)
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - default: 5
        description: Amount items per page (min -1, max 100, -1 means unlimited)
        in: query
        maximum: 100
        minimum: -1
        name: pageSize
        required: true
        type: integer
      - default: '{}'
        description: |-
          Sorting result on server e.g. {"prop":"...","order":"..."}
            field order is "ascending" or "descending" value
        in: query
        name: sort
        required: true
        type: string
      - default: init
        description: Type of request
        enum:
        - sort
        - filter
        - init
        - page
        - size
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: tags list received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/private.tags'
              type: object
        "400":
          description: invalid query request data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: getting tags not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting tags
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve tags list by filters
      tags:
      - Tags
  /tenant/{hash}:
    put:
      parameters:
      - description: tenant model to update
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/models.Tenant'
      - description: tenant hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: tenant updated successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Tenant'
              type: object
        "400":
          description: invalid tenant request data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: updating tenant not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: tenant not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on updating tenant
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update tenant
      tags:
      - Tenants
  /tenants/:
    get:
      parameters:
      - collectionFormat: multi
        description: |-
          Filtering result on server e.g. {"value":[...],"field":"..."}
            field value should be integer or string or array type
        in: query
        items:
          type: string
        name: filters[]
        type: array
      - description: Field to group results by
        in: query
        name: group
        type: string
      - default: en
        description: Language of result data
        enum:
        - en
        - ru
        in: query
        name: lang
        required: true
        type: string
      - default: 1
        description: Number of page (since 1)
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - default: 5
        description: Amount items per page (min -1, max 100, -1 means unlimited)
        in: query
        maximum: 100
        minimum: -1
        name: pageSize
        required: true
        type: integer
      - default: '{}'
        description: |-
          Sorting result on server e.g. {"prop":"...","order":"..."}
            field order is "ascending" or "descending" value
        in: query
        name: sort
        required: true
        type: string
      - default: init
        description: Type of request
        enum:
        - sort
        - filter
        - init
        - page
        - size
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: tenants list received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/private.tenants'
              type: object
        "400":
          description: invalid query request data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: getting tenants not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting tenants
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve tenants list
      tags:
      - Tenants
    post:
      consumes:
      - application/json
      parameters:
      - description: tenant model to create from
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/models.Tenant'
      produces:
      - application/json
      responses:
        "201":
          description: tenant created successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Tenant'
              type: object
        "400":
          description: invalid tenant request data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: creating tenant not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on creating tenant
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create new tenant
      tags:
      - Tenants
  /tenants/{hash}:
    delete:
      parameters:
      - description: hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: tenant deleted successful
          schema:
            $ref: '#/definitions/SuccessResponse'
        "403":
          description: deleting tenant not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: tenant not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on deleting tenant
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete tenant by hash
      tags:
      - Tenants
    get:
      parameters:
      - description: hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: tenant received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Tenant'
              type: object
        "403":
          description: getting tenant not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: tenant not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting tenant
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve tenant by hash
      tags:
      - Tenants
  /token/vxproto:
    post:
      consumes:
      - application/json
      parameters:
      - description: Proto auth token request JSON data
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/models.ProtoAuthTokenRequest'
      produces:
      - application/json
      responses:
        "201":
          description: token created successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.ProtoAuthToken'
              type: object
        "400":
          description: invalid requested token info
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: creating token not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on creating token
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create new JWT token to use it into vxproto connections
      tags:
      - Proto
  /upgrades/agents:
    get:
      parameters:
      - collectionFormat: multi
        description: |-
          Filtering result on server e.g. {"value":[...],"field":"..."}
            field value should be integer or string or array type
        in: query
        items:
          type: string
        name: filters[]
        type: array
      - description: Field to group results by
        in: query
        name: group
        type: string
      - default: en
        description: Language of result data
        enum:
        - en
        - ru
        in: query
        name: lang
        required: true
        type: string
      - default: 1
        description: Number of page (since 1)
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - default: 5
        description: Amount items per page (min -1, max 100, -1 means unlimited)
        in: query
        maximum: 100
        minimum: -1
        name: pageSize
        required: true
        type: integer
      - default: '{}'
        description: |-
          Sorting result on server e.g. {"prop":"...","order":"..."}
            field order is "ascending" or "descending" value
        in: query
        name: sort
        required: true
        type: string
      - default: init
        description: Type of request
        enum:
        - sort
        - filter
        - init
        - page
        - size
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: agents upgrades list received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/private.upgradesAgents'
              type: object
        "400":
          description: invalid query request data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: getting agents upgrades not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting agents upgrades
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve agents upgrades list
      tags:
      - Upgrades
      - Agents
    post:
      consumes:
      - application/json
      parameters:
      - description: action on agents as JSON data
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/private.upgradesAgentsAction'
      produces:
      - application/json
      responses:
        "201":
          description: agents upgrade requested succesful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/private.upgradesAgentsActionResult'
              type: object
        "400":
          description: invalid agents upgrade request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: upgrading agents not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: agent binary file not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on requesting agents to upgrade
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Upgrade agents to a specific version
      tags:
      - Upgrades
      - Agents
  /upgrades/agents/{hash}/last:
    get:
      parameters:
      - description: agent hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: last agent upgrade information received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/private.upgradeAgent'
              type: object
        "400":
          description: invalid query request data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: getting last agent upgrade information not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: agent or group or task not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting last agent upgrade information
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve last agent upgrade information
      tags:
      - Upgrades
      - Agents
    put:
      consumes:
      - application/json
      parameters:
      - description: agent hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      - description: agent info as JSON data
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/models.AgentUpgradeTask'
      produces:
      - application/json
      responses:
        "200":
          description: last agent upgrade information updated successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.AgentUpgradeTask'
              type: object
        "400":
          description: invalid last agent upgrade information
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: updating last agent upgrade information not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: agent or group or task not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on updating last agent upgrade information
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update last agent upgrade information
      tags:
      - Upgrades
      - Agents
  /user/:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: user info received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.UserRoleTenant'
              type: object
        "403":
          description: getting current user not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: current user not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting current user
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve current user information
      tags:
      - Users
  /user/password:
    put:
      consumes:
      - application/json
      parameters:
      - description: container to validate and update account password
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/models.Password'
      produces:
      - application/json
      responses:
        "200":
          description: account password updated successful
          schema:
            $ref: '#/definitions/SuccessResponse'
        "400":
          description: invalid account password form data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: updating account password not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: current user not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on updating account password
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update password for current user (account)
      tags:
      - Users
  /users/:
    get:
      parameters:
      - collectionFormat: multi
        description: |-
          Filtering result on server e.g. {"value":[...],"field":"..."}
            field value should be integer or string or array type
        in: query
        items:
          type: string
        name: filters[]
        type: array
      - description: Field to group results by
        in: query
        name: group
        type: string
      - default: en
        description: Language of result data
        enum:
        - en
        - ru
        in: query
        name: lang
        required: true
        type: string
      - default: 1
        description: Number of page (since 1)
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - default: 5
        description: Amount items per page (min -1, max 100, -1 means unlimited)
        in: query
        maximum: 100
        minimum: -1
        name: pageSize
        required: true
        type: integer
      - default: '{}'
        description: |-
          Sorting result on server e.g. {"prop":"...","order":"..."}
            field order is "ascending" or "descending" value
        in: query
        name: sort
        required: true
        type: string
      - default: init
        description: Type of request
        enum:
        - sort
        - filter
        - init
        - page
        - size
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: users list received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/private.users'
              type: object
        "400":
          description: invalid query request data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: getting users not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting users
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve users list by filters
      tags:
      - Users
    post:
      consumes:
      - application/json
      parameters:
      - description: user model to create from
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/models.UserPassword'
      produces:
      - application/json
      responses:
        "201":
          description: user created successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.UserRoleTenant'
              type: object
        "400":
          description: invalid user request data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: creating user not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on creating user
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create new user
      tags:
      - Users
  /users/{hash}:
    delete:
      parameters:
      - description: hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: user deleted successful
          schema:
            $ref: '#/definitions/SuccessResponse'
        "403":
          description: deleting user not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on deleting user
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete user by hash
      tags:
      - Users
    get:
      parameters:
      - description: hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: user received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.UserRoleTenant'
              type: object
        "403":
          description: getting user not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting user
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve user by hash
      tags:
      - Users
    put:
      parameters:
      - description: user model to update
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/models.UserPassword'
      - description: user hash in hex format (md5)
        in: path
        maxLength: 32
        minLength: 32
        name: hash
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: user updated successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.UserRoleTenant'
              type: object
        "400":
          description: invalid user request data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: updating user not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on updating user
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update user
      tags:
      - Users
  /versions/:
    get:
      parameters:
      - collectionFormat: multi
        description: |-
          Filtering result on server e.g. {"value":[...],"field":"..."}
            field value should be integer or string or array type
        in: query
        items:
          type: string
        name: filters[]
        type: array
      - description: Field to group results by
        in: query
        name: group
        type: string
      - default: en
        description: Language of result data
        enum:
        - en
        - ru
        in: query
        name: lang
        required: true
        type: string
      - default: 1
        description: Number of page (since 1)
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - default: 5
        description: Amount items per page (min -1, max 100, -1 means unlimited)
        in: query
        maximum: 100
        minimum: -1
        name: pageSize
        required: true
        type: integer
      - default: '{}'
        description: |-
          Sorting result on server e.g. {"prop":"...","order":"..."}
            field order is "ascending" or "descending" value
        in: query
        name: sort
        required: true
        type: string
      - default: init
        description: Type of request
        enum:
        - sort
        - filter
        - init
        - page
        - size
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: versions list received successful
          schema:
            allOf:
            - $ref: '#/definitions/SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/private.versions'
              type: object
        "400":
          description: invalid query request data
          schema:
            $ref: '#/definitions/ErrorResponse'
        "403":
          description: getting versions not permitted
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: internal error on getting versions
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Retrieve versions list by filters
      tags:
      - Versions
swagger: "2.0"
